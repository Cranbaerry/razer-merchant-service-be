import { getDMMF } from '@prisma/internals';
import fs from 'node:fs/promises';
import path from 'node:path';

const header = `/* eslint-disable prettier/prettier */\n// This file was generated by a custom prisma generator, do not edit manually.\n`;

interface Job {
  name: string;
  run: () => Promise<void>;
}

async function main() {
  const schemaContent = await fs.readFile('./prisma/schema.prisma', 'utf-8');
  const dmmf = await getDMMF({ datamodel: schemaContent });

  const jobs: Job[] = [
    {
      name: 'Generate enums file',
      run: async () => {
        const output = dmmf.datamodel.enums.map((e) => {
          let enumString = `export const ${e.name} = {\n`;
          e.values.forEach(({ name: value }) => {
            enumString += `  ${value}: "${value}",\n`;
          });
          enumString += `} as const;\n\n`;
          enumString += `export type ${e.name} = (typeof ${e.name})[keyof typeof ${e.name}];\n`;

          return enumString;
        });

        const outputPath = path.resolve('./libs/entities/enums.ts');
        await fs.mkdir(path.dirname(outputPath), { recursive: true });
        await fs.writeFile(outputPath, header + output.join('\n'), 'utf-8');
      },
    },
    {
      name: 'Checking models for missing dbName',
      run: async () => {
        const models = dmmf.datamodel.models;
        const missingDbName = models.filter((model) => !model.dbName);

        if (missingDbName.length > 0) {
          console.error(
            `\nThe following models are missing @@map fields: ${missingDbName
              .map((model) => model.name)
              .join(', ')}`,
          );
          process.exit(1);
        }
      },
    },
  ];

  for (const job of jobs) {
    console.log(`Running job: ${job.name}`);
    await job.run();
  }
}
main();
